{"remainingRequest":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/eltree/components/eltree.vue?vue&type=style&index=0&id=ca48e1a4&lang=scss&scoped=true&","dependencies":[{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/eltree/components/eltree.vue","mtime":1600671599918},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/css-loader/dist/cjs.js","mtime":1599108269421},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1596534517134},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/postcss-loader/src/index.js","mtime":1589102445832},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/sass-loader/dist/cjs.js","mtime":1589102469905},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/cache-loader/dist/cjs.js","mtime":1589102393205},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js","mtime":1596534517134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQo6OnYtZGVlcCB7DQogIC5tZW51LWl0ZW0gew0KICAgIGRpc3BsYXk6IGZsZXg7DQogIH0NCn0NCg=="},{"version":3,"sources":["eltree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiGA;AACA;AACA;AACA;AACA","file":"eltree.vue","sourceRoot":"src/views/eltree/components","sourcesContent":["<template>\r\n  <div>\r\n    <Tree :data=\"allData\" default-expand-all :render-content=\"renderContent\"></Tree>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Tree } from \"element-ui\";\r\nexport default {\r\n  components: {\r\n    Tree,\r\n  },\r\n  props: {\r\n    treeData: {\r\n      default: () => [],\r\n      require: true,\r\n      type: Array,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      allData: [],\r\n    };\r\n  },\r\n  watch: {\r\n    // treeData: {\r\n    //   handler (v) {\r\n    //     v.length != 0 && this.transformTreeData(v);\r\n    //   },\r\n    //   deep:true\r\n    // },\r\n  },\r\n  methods: {\r\n    /* 克隆数据 */\r\n    cloneDeepTreeData(data) {\r\n      let cloneDeepedtreeData = JSON.parse(JSON.stringify(data));\r\n      return cloneDeepedtreeData;\r\n    },\r\n    /* 处理数据格式变成多维数组 */\r\n    transformTreeData(data) {\r\n      let treeData = this.cloneDeepTreeData(data);\r\n      /* 映射每个元素id */\r\n      let treeMap = treeData.reduce((pre, current) => {\r\n        pre[current[\"id\"]] = current;\r\n        return pre;\r\n      }, {});\r\n      let result = treeData.reduce((pre, current) => {\r\n        let pid = current.pid; //所属父元素的id\r\n        let parent = treeMap[pid]; //获取父元素\r\n        if (parent) {\r\n          parent.type = \"parent\"; //给父元素一个类型标识\r\n          parent.children\r\n            ? parent.children.push(current)\r\n            : (parent.children = [current]);\r\n        } else {\r\n          current.type = \"parent\"; //给父元素一个类型标识\r\n          pre.push(current);\r\n        }\r\n        return pre;\r\n      }, []);\r\n      this.allData = result;\r\n    },\r\n    /* 设置每个节点的图标 */\r\n    setNodeIcon(type, isOpen = false, isHaveChild = false) {\r\n      switch (type) {\r\n        case \"parent\":\r\n          return isOpen == false || isHaveChild == false ? (\r\n            <label class=\"el-icon-folder\"></label>\r\n          ) : (\r\n            <label class=\"el-icon-folder-opened\"></label>\r\n          );\r\n        default:\r\n          return <label class=\"el-icon-document\"></label>;\r\n      }\r\n    },\r\n    /* 自定义节点函数 */\r\n    renderContent(h, { node, data, store }) {\r\n      let isHaveChild =\r\n        node.childNodes.length == 0 || !node.childNodes ? false : true; //判断是否有子节点\r\n      data, store;\r\n      return (\r\n        <div class=\"menu-item\">\r\n          <span>{this.setNodeIcon(data.type, node.expanded, isHaveChild)}</span>\r\n          {data.name}\r\n        </div>\r\n      );\r\n    },\r\n  },\r\n  created() {\r\n    this.$nextTick(() => {\r\n      this.transformTreeData(this.treeData);\r\n    });\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n::v-deep {\r\n  .menu-item {\r\n    display: flex;\r\n  }\r\n}\r\n</style>"]}]}