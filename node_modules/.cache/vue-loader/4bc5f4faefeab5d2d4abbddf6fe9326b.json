{"remainingRequest":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/functionfunction/index.vue?vue&type=style&index=0&id=86a84a66&lang=scss&scoped=true&","dependencies":[{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/functionfunction/index.vue","mtime":1601536549523},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/css-loader/dist/cjs.js","mtime":1599108269421},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1596534517134},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/postcss-loader/src/index.js","mtime":1589102445832},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/sass-loader/dist/cjs.js","mtime":1589102469905},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/cache-loader/dist/cjs.js","mtime":1589102393205},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js","mtime":1596534517134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZvcm1MYWJsZUJveCB7CiAgbWFyZ2luOiAyMHB4IDA7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogICYgZGl2IHsKICAgIHRleHQtaW5kZW50OiAycmVtOwoKICAgIHBhZGRpbmctbGVmdDogMTBweDsKICAgICY6OmJlZm9yZSB7CiAgICAgIGNvbnRlbnQ6ICIiOwogICAgICBoZWlnaHQ6IDE0cHg7CiAgICAgIHdpZHRoOiAycHg7CiAgICAgIHRvcDogNTAlOwogICAgICBsZWZ0OiAycmVtOwogICAgICBtYXJnaW4tdG9wOiAtN3B4OwogICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICM0MDllZmY7CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/functionfunction","sourcesContent":["\n<template>\n  <div>\n    <el-button type=\"text\" @click=\"handleClose\">点击打开 Dialog</el-button>\n    <mydialog :visible.sync=\"dialogVisible\" width=\"80%\" title=\"myForm\">\n      <template v-slot>\n        <myform\n          :inline=\"false\"\n          :row=\"false\"\n          :col=\"false\"\n          :cof=\"cof\"\n          :formConfigData=\"formConfigData\"\n          :formData=\"formData\"\n          @getFormData=\"getFormData\"\n          @getFormRef=\"getFormRef\"\n          :show=\"showForm\"\n        >\n          <!-- 每个form一个lable -->\n          <template slot=\"form1\">\n            <div class=\"formLableBox\"><div>form1</div></div>\n          </template>\n          <template slot=\"form2\">\n            <div class=\"formLableBox\"><div>form2</div></div>\n          </template>\n        </myform>\n        <div>\n          <el-button @click=\"resetForm\">重置</el-button>\n          <el-button type=\"primary\">确 定</el-button>\n          <el-button @click=\"nextSetup('form1')\">上一步</el-button>\n          <el-button @click=\"nextSetup('form2')\">下一步</el-button>\n        </div>\n      </template>\n    </mydialog>\n  </div>\n</template>\n\n<script>\nimport mydialog from \"./eldialog\";\nimport myform from \"@/views/myform\";\n// import { configJson as cof } from \"@/views/myform/config.js\";\nimport { configJson as cof } from \"@/views/myform/configJson.js\";\n\nvar formInstance;\nvar showFormMap = Array.from(new Set([\"form1\", \"form2\"])); //每步对应form映射\nvar setup = 0; //当前第几步\nexport default {\n  components: { mydialog, myform },\n  data() {\n    return {\n      dialogVisible: false, //抽屉开关\n      showForm: showFormMap[setup],\n      formData: { form1: { input: 12 }, form2: { radio2: \"ra1\" } }, //用于回显数据\n      //用于异步拉取字典\n      formConfigData: {\n        select1: [\n          //无子表单项\n          {\n            value: \"1\",\n            label: \"黄金糕\",\n          },\n          {\n            value: \"2\",\n            label: \"双皮奶\",\n          },\n          {\n            value: \"3\",\n            label: \"蚵仔煎\",\n          },\n          {\n            value: \"3\",\n            label: \"蚵仔煎\",\n          },\n          {\n            value: \"3\",\n            label: \"蚵仔煎\",\n          },\n        ],\n        form1: {\n          //有子表单项\n          select1: [\n            {\n              value: \"1\",\n              label: \"黄金糕\",\n            },\n            {\n              value: \"2\",\n              label: \"双皮奶\",\n            },\n            {\n              value: \"3\",\n              label: \"蚵仔煎\",\n            },\n            {\n              value: \"3\",\n              label: \"蚵仔煎\",\n            },\n            {\n              value: \"3\",\n              label: \"蚵仔煎\",\n            },\n          ],\n        },\n      },\n    };\n  },\n  computed: {\n    cof() {\n      return cof;\n    },\n  },\n  methods: {\n    handleClose() {\n      this.dialogVisible = true;\n    },\n\n    /* 获取form表单所有数据 */\n    getFormData(formData) {\n      console.log(formData);\n    },\n    /* 获取form实例 */\n    getFormRef(e) {\n      formInstance = e;\n    },\n    /* 清空表单 */\n    resetForm() {\n      formInstance.resetFieldsFn();\n    },\n    /* 模拟下一步上一步 */\n    nextSetup(formKey) {\n      this.onSubmit(formKey);\n    },\n    /* 提交表单 */\n    onSubmit(formKey) {\n      formInstance.validate((valid) => {\n        if (valid) {\n          this.showForm = formKey; //要显示的form\n          setup = showFormMap[formKey]; //当前第几步了\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    },\n    /* 级联选择动态加载，直接再配置中配置关键字，value为指向此实例的方法 */\n    lazyLoad(node, resolve) {\n      var id = 0;\n      const { level } = node;\n      setTimeout(() => {\n        const nodes = Array.from({ length: level + 1 }).map(() => ({\n          value: ++id,\n          label: `选项${id}`,\n          leaf: level >= 2,\n        }));\n        // 通过调用resolve将子节点数据返回，通知组件数据加载完成\n        resolve(nodes);\n      }, 1000);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.formLableBox {\n  margin: 20px 0;\n  position: relative;\n  & div {\n    text-indent: 2rem;\n\n    padding-left: 10px;\n    &::before {\n      content: \"\";\n      height: 14px;\n      width: 2px;\n      top: 50%;\n      left: 2rem;\n      margin-top: -7px;\n      position: absolute;\n      background-color: #409eff;\n    }\n  }\n}\n</style>"]}]}