{"remainingRequest":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/d3/d3init2.vue?vue&type=style&index=0&id=68a0088d&lang=scss&scoped=true&","dependencies":[{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/src/views/d3/d3init2.vue","mtime":1600410959934},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/css-loader/dist/cjs.js","mtime":1599108269421},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1596534517134},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/postcss-loader/src/index.js","mtime":1589102445832},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/sass-loader/dist/cjs.js","mtime":1589102469905},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/cache-loader/dist/cjs.js","mtime":1589102393205},{"path":"/Users/caishan/Desktop/代码资源/demo/mycode/aboutvue/归档/node_modules/vue-loader/lib/index.js","mtime":1596534517134}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNjYWxlIHsKICBoZWlnaHQ6IDEwMCU7Cn0K"},{"version":3,"sources":["d3init2.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;AACA;AACA","file":"d3init2.vue","sourceRoot":"src/views/d3","sourcesContent":["<template>\n  <div class=\"scale\">\n    <svg id=\"myD3\" width=\"1000\" height=\"800\" />\n  </div>\n</template>\n\n<script>\nlet data = [\n  { name: \"das\", value: 22 },\n  { name: \"et\", value: 12 },\n  { name: \"fsf\", value: 33 },\n  { name: \"ajr\", value: 7 },\n  { name: \"rfv\", value: 16 },\n  { name: \"pou\", value: 19 },\n  { name: \"alo\", value: 38 },\n];\nexport default {\n  name: \"d3init2\",\n  mounted() {\n    const d3 = window.d3;\n    const svg = d3.select(\"#myD3\");\n    let margin = { top: 100, right: 200, bottom: 100, left: 200 };\n    let svgWidth = +svg.attr(\"width\");\n    let svgHeight = +svg.attr(\"height\");\n    let innerWidth = svgWidth - margin.left - margin.right; //图表载体宽度\n    let innerHeight = svgHeight - margin.top - margin.bottom;\n    /* 定义x y 轴并映射 */\n    let xScale = d3\n      .scaleLinear()\n      .domain([d3.min(data, (d) => d.value), d3.max(data, (d) => d.value)])\n      .range([0, innerWidth]); //domain 数据范围 range 像素范围\n    let yScale = d3\n      .scaleBand()\n      .domain(data.map((item) => item.name))\n      .range([0, innerHeight]);\n\n    /* 创建图表承载容器留出边距 */\n    let g = svg\n      .append(\"g\")\n      .attr(\"id\", \"maingroup\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n    /*创建左边y轴 并把定义的y轴传入*/\n    let yAxis = d3.axisLeft(yScale);\n    /* 创建一个组装载y轴呈现 */\n    g.append(\"g\").call(yAxis);\n    /* 创建x轴,并把定义的x轴传入 */\n    let xAxis = d3.axisBottom(xScale);\n    g.append(\"g\").call(xAxis).attr(\"transform\", `translate(0,${innerHeight})`);\n    /* 设定长方形柱子 */\n    g.selectAll(\"rect\") //表示所有rect被暂定选中\n      .data(data) //绑定数据\n      .enter() //获取到没有绑定上的数据\n      .append(\"rect\") //添加和数据相同个数的长方形元素\n      .attr(\"width\", (data) => xScale(data.value)) //给每个rect添加线性比例尺宽度\n      .attr(\"height\", yScale.bandwidth() - 10) //给每个rect添加以条带比例尺宽度相当的高度\n      .attr(\"y\", (data, i) => i * yScale.bandwidth()); //给每个元素设置y轴位置\n\n    // data.forEach((item) => {\n    //   g.append(\"rect\")\n    //     .attr(\"width\", xScale(item.value)) //把具体的值通过xScale映射到x轴\n    //     .attr(\"height\", yScale.bandwidth()) //设定对应条带值的宽度\n    //     .attr(\"fill\", \"green\") //填充颜色\n    //     .attr(\"y\", yScale(item.name)); //把离散的值映射到y轴条带上\n    // });\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.scale {\n  height: 100%;\n}\n</style>"]}]}